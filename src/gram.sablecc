Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
nb = ['0' .. '9'];
symbs = '$' | '_';

Tokens
plus = '+';
egal = '=';
moins = '-';
mult = '*';
div = '/';
inf = '<';
et = '&';
ou = '|';
non = '!';
pvir = ';';
vir = ',';
acc_o = '{';
acc_f = '}';
croch_o = '[';
croch_f = ']';
par_o = '(';
par_f = ')';
sin = 'sinon';
si = 'si';
al = 'alors';
tq = 'tant_que';
fai = 'faire';
ret = 'retour';
fct = 'fonction';
ecr = 'ecrire';
lir = 'lire';
ent = 'entier';
id = lettre lettre*;
nombre = nb+;

espace = (' ' | 13 | 10 )+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

Ignored Tokens

espace,
commentaire;

Productions

programme = ldvo ldf;

ldvo =
{list_var_opt} ldv pvir|
{list_var_opt_vide}  ;

ldv =
{list_var_main} dvar ldv_alt |
{list_var_main_vide} ;


ldv_alt =
{liste_var} vir dvar ldv_alt |
{liste_vide_var} ;












ldf =
{ldf_dv} df ldf |
{ldf_vide} ;

df =
{def_fct} id par_o ldv par_f  ldvo ibloc;

ibloc =
{ldi} acc_o ldi acc_f;

ldi =
{ldi_list} inst_bloc ldi |
{ldi_vide} ;


inst_bloc =
{iapp} iapp |
{iaff} iaff |
{isi} isi |
{itq} itq |
{iret} iret |
{ecriture} ecrire;
//{lire} lir par_o par_f pvir;


iapp =
{app} app pvir;


app =
{app_lde} id par_o lde par_f;

iaff =
{aff} var egal expr pvir;

isi =
{inst_si} si expr al ibloc sinon;

sinon =
{inst_sinon} sin ibloc |
{sinon_vide} ;

itq =
{inst_tq} tq expr fai ibloc;

iret =
{inst_ret}  ret expr pvir;













var =
{v_simple} id |
{v_deriv} id croch_o nombre croch_f;

dvar =
{dv_simple} ent  id|
{dv_derive} ent  id croch_o nombre croch_f;


lde =
{lde_list} expr lde |
{lde_vide} ;

expr =
{expr_ou} expr ou expr1  |
{expr1} expr1;

expr1 =
{expr_et} expr1 et expr2 |
{expr2} expr2;

expr2 =
{expr_eq} expr2 egal expr3 |
{exp_inf} expr2 inf expr3 |
{expr3} expr3;

expr3 =
{expr_plus} expr3 plus expr4 |
{expr_moins} expr3 moins expr4 |
{expr4} expr4;

expr4 =
{expr_mult} expr4 mult expr5 |
{expr_div} expr4 div expr5 |
{expr5} expr5;

expr5 =
{expr_non} non expr5 |
{expr6} expr6;

expr6 =
{expr_par} par_o expr par_f |
{expr_nb} nombre |
{expr_var} var;
//{expr_appel} app;

ecrire =
{ecr_expr} ecr par_o expr par_f pvir ;

