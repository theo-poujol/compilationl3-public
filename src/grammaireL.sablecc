Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
nb = ['0' .. '9']+;

Tokens
plus = '+';
egal = '=';
moins = '-';
mult = '*';
div = '/';
inf = '<';
et = '&';
ou = '|';
non = '!';
pvir = ';';
vir = ',';
acc_o = '{';
acc_f = '}';
croch_o = '[';
croch_f = ']';
par_o = '(';
par_f = ')';
si = 'si';
al = 'alors';
sin = 'sinon';
tq = 'tant_que';
fai = 'faire';
ret = 'retour';
fct = 'fonction';
ecr = 'ecrire';
lir = 'lire';
ent = 'entier';
id = lettre + (lettre | nb)+;
nombre = nb;

espace = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

Ignored Tokens

commentaire;

Productions

var =
{v_simple} id |
{v_deriv} id croch_o nombre croch_f;

dvar =
{dv_simple} ent espace id|
{dv_derive} ent espace id croch_o nombre croch_f;

ldv_alt =
{liste_var} vir dvar ldv_alt |
{liste_vide_var} ;

ldv =
{list_var_main} dvar ldv_alt |
{list_var_main_vide} ;

ldvo =
{list_var_opt} ldv pvir |
{list_var_opt_vide}  ;

expr =
{expr_ou} expr ou expr1  |
{expr1} expr1;

expr1 =
{expr_et} expr1 et expr2 |
{expr2} expr2;

expr2 =
{expr_eq} expr2 egal expr3 |
{exp_inf} expr2 inf expr3 |
{expr3} expr3;

expr3 =
{expr_plus} expr3 plus expr4 |
{expr_moins} expr3 moins expr4 |
{expr4} expr4;

expr4 =
{expr_mult} expr4 mult expr5 |
{expr_div} expr4 div expr5 |
{expr5} expr5;

expr5 =
{expr_non} non expr5 |
{expr6} expr6;

expr6 =
{expr_par} par_o expr par_f;
{expr_nb} nombre |
{expr_var} var |
//{expr_appel} appel;



//programme = optdecvar listedecfonc ;

//expr = nombre;
