/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgramme().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramme(AProgramme node)
    {
        defaultIn(node);
    }

    public void outAProgramme(AProgramme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        inAProgramme(node);
        if(node.getLdvo() != null)
        {
            node.getLdvo().apply(this);
        }
        if(node.getLdf() != null)
        {
            node.getLdf().apply(this);
        }
        outAProgramme(node);
    }

    public void inAListVarOptLdvo(AListVarOptLdvo node)
    {
        defaultIn(node);
    }

    public void outAListVarOptLdvo(AListVarOptLdvo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVarOptLdvo(AListVarOptLdvo node)
    {
        inAListVarOptLdvo(node);
        if(node.getLdv() != null)
        {
            node.getLdv().apply(this);
        }
        if(node.getPvir() != null)
        {
            node.getPvir().apply(this);
        }
        outAListVarOptLdvo(node);
    }

    public void inAListVarOptVideLdvo(AListVarOptVideLdvo node)
    {
        defaultIn(node);
    }

    public void outAListVarOptVideLdvo(AListVarOptVideLdvo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVarOptVideLdvo(AListVarOptVideLdvo node)
    {
        inAListVarOptVideLdvo(node);
        outAListVarOptVideLdvo(node);
    }

    public void inAListVarMainLdv(AListVarMainLdv node)
    {
        defaultIn(node);
    }

    public void outAListVarMainLdv(AListVarMainLdv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVarMainLdv(AListVarMainLdv node)
    {
        inAListVarMainLdv(node);
        if(node.getDvar() != null)
        {
            node.getDvar().apply(this);
        }
        if(node.getLdvAlt() != null)
        {
            node.getLdvAlt().apply(this);
        }
        outAListVarMainLdv(node);
    }

    public void inAListVarMainVideLdv(AListVarMainVideLdv node)
    {
        defaultIn(node);
    }

    public void outAListVarMainVideLdv(AListVarMainVideLdv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVarMainVideLdv(AListVarMainVideLdv node)
    {
        inAListVarMainVideLdv(node);
        outAListVarMainVideLdv(node);
    }

    public void inAListeVarLdvAlt(AListeVarLdvAlt node)
    {
        defaultIn(node);
    }

    public void outAListeVarLdvAlt(AListeVarLdvAlt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeVarLdvAlt(AListeVarLdvAlt node)
    {
        inAListeVarLdvAlt(node);
        if(node.getVir() != null)
        {
            node.getVir().apply(this);
        }
        if(node.getDvar() != null)
        {
            node.getDvar().apply(this);
        }
        if(node.getLdvAlt() != null)
        {
            node.getLdvAlt().apply(this);
        }
        outAListeVarLdvAlt(node);
    }

    public void inAListeVideVarLdvAlt(AListeVideVarLdvAlt node)
    {
        defaultIn(node);
    }

    public void outAListeVideVarLdvAlt(AListeVideVarLdvAlt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListeVideVarLdvAlt(AListeVideVarLdvAlt node)
    {
        inAListeVideVarLdvAlt(node);
        outAListeVideVarLdvAlt(node);
    }

    public void inALdfDvLdf(ALdfDvLdf node)
    {
        defaultIn(node);
    }

    public void outALdfDvLdf(ALdfDvLdf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdfDvLdf(ALdfDvLdf node)
    {
        inALdfDvLdf(node);
        if(node.getDf() != null)
        {
            node.getDf().apply(this);
        }
        if(node.getLdf() != null)
        {
            node.getLdf().apply(this);
        }
        outALdfDvLdf(node);
    }

    public void inALdfVideLdf(ALdfVideLdf node)
    {
        defaultIn(node);
    }

    public void outALdfVideLdf(ALdfVideLdf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdfVideLdf(ALdfVideLdf node)
    {
        inALdfVideLdf(node);
        outALdfVideLdf(node);
    }

    public void inADefFctDf(ADefFctDf node)
    {
        defaultIn(node);
    }

    public void outADefFctDf(ADefFctDf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefFctDf(ADefFctDf node)
    {
        inADefFctDf(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParO() != null)
        {
            node.getParO().apply(this);
        }
        if(node.getLdv() != null)
        {
            node.getLdv().apply(this);
        }
        if(node.getParF() != null)
        {
            node.getParF().apply(this);
        }
        if(node.getLdvo() != null)
        {
            node.getLdvo().apply(this);
        }
        if(node.getIbloc() != null)
        {
            node.getIbloc().apply(this);
        }
        outADefFctDf(node);
    }

    public void inALdiIbloc(ALdiIbloc node)
    {
        defaultIn(node);
    }

    public void outALdiIbloc(ALdiIbloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdiIbloc(ALdiIbloc node)
    {
        inALdiIbloc(node);
        if(node.getAccO() != null)
        {
            node.getAccO().apply(this);
        }
        if(node.getLdi() != null)
        {
            node.getLdi().apply(this);
        }
        if(node.getAccF() != null)
        {
            node.getAccF().apply(this);
        }
        outALdiIbloc(node);
    }

    public void inALdiListLdi(ALdiListLdi node)
    {
        defaultIn(node);
    }

    public void outALdiListLdi(ALdiListLdi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdiListLdi(ALdiListLdi node)
    {
        inALdiListLdi(node);
        if(node.getInstBloc() != null)
        {
            node.getInstBloc().apply(this);
        }
        if(node.getLdi() != null)
        {
            node.getLdi().apply(this);
        }
        outALdiListLdi(node);
    }

    public void inALdiVideLdi(ALdiVideLdi node)
    {
        defaultIn(node);
    }

    public void outALdiVideLdi(ALdiVideLdi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdiVideLdi(ALdiVideLdi node)
    {
        inALdiVideLdi(node);
        outALdiVideLdi(node);
    }

    public void inAIappInstBloc(AIappInstBloc node)
    {
        defaultIn(node);
    }

    public void outAIappInstBloc(AIappInstBloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIappInstBloc(AIappInstBloc node)
    {
        inAIappInstBloc(node);
        if(node.getIapp() != null)
        {
            node.getIapp().apply(this);
        }
        outAIappInstBloc(node);
    }

    public void inAIaffInstBloc(AIaffInstBloc node)
    {
        defaultIn(node);
    }

    public void outAIaffInstBloc(AIaffInstBloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIaffInstBloc(AIaffInstBloc node)
    {
        inAIaffInstBloc(node);
        if(node.getIaff() != null)
        {
            node.getIaff().apply(this);
        }
        outAIaffInstBloc(node);
    }

    public void inAIsiInstBloc(AIsiInstBloc node)
    {
        defaultIn(node);
    }

    public void outAIsiInstBloc(AIsiInstBloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsiInstBloc(AIsiInstBloc node)
    {
        inAIsiInstBloc(node);
        if(node.getIsi() != null)
        {
            node.getIsi().apply(this);
        }
        outAIsiInstBloc(node);
    }

    public void inAItqInstBloc(AItqInstBloc node)
    {
        defaultIn(node);
    }

    public void outAItqInstBloc(AItqInstBloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItqInstBloc(AItqInstBloc node)
    {
        inAItqInstBloc(node);
        if(node.getItq() != null)
        {
            node.getItq().apply(this);
        }
        outAItqInstBloc(node);
    }

    public void inAIretInstBloc(AIretInstBloc node)
    {
        defaultIn(node);
    }

    public void outAIretInstBloc(AIretInstBloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIretInstBloc(AIretInstBloc node)
    {
        inAIretInstBloc(node);
        if(node.getIret() != null)
        {
            node.getIret().apply(this);
        }
        outAIretInstBloc(node);
    }

    public void inAEcritureInstBloc(AEcritureInstBloc node)
    {
        defaultIn(node);
    }

    public void outAEcritureInstBloc(AEcritureInstBloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcritureInstBloc(AEcritureInstBloc node)
    {
        inAEcritureInstBloc(node);
        if(node.getEcrire() != null)
        {
            node.getEcrire().apply(this);
        }
        outAEcritureInstBloc(node);
    }

    public void inALireInstBloc(ALireInstBloc node)
    {
        defaultIn(node);
    }

    public void outALireInstBloc(ALireInstBloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALireInstBloc(ALireInstBloc node)
    {
        inALireInstBloc(node);
        if(node.getLire() != null)
        {
            node.getLire().apply(this);
        }
        outALireInstBloc(node);
    }

    public void inAAppIapp(AAppIapp node)
    {
        defaultIn(node);
    }

    public void outAAppIapp(AAppIapp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppIapp(AAppIapp node)
    {
        inAAppIapp(node);
        if(node.getApp() != null)
        {
            node.getApp().apply(this);
        }
        if(node.getPvir() != null)
        {
            node.getPvir().apply(this);
        }
        outAAppIapp(node);
    }

    public void inAAppLdeApp(AAppLdeApp node)
    {
        defaultIn(node);
    }

    public void outAAppLdeApp(AAppLdeApp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppLdeApp(AAppLdeApp node)
    {
        inAAppLdeApp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParO() != null)
        {
            node.getParO().apply(this);
        }
        if(node.getLde() != null)
        {
            node.getLde().apply(this);
        }
        if(node.getParF() != null)
        {
            node.getParF().apply(this);
        }
        outAAppLdeApp(node);
    }

    public void inAAffIaff(AAffIaff node)
    {
        defaultIn(node);
    }

    public void outAAffIaff(AAffIaff node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffIaff(AAffIaff node)
    {
        inAAffIaff(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPvir() != null)
        {
            node.getPvir().apply(this);
        }
        outAAffIaff(node);
    }

    public void inAAffLireIaff(AAffLireIaff node)
    {
        defaultIn(node);
    }

    public void outAAffLireIaff(AAffLireIaff node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffLireIaff(AAffLireIaff node)
    {
        inAAffLireIaff(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getLire() != null)
        {
            node.getLire().apply(this);
        }
        outAAffLireIaff(node);
    }

    public void inAInstSiIsi(AInstSiIsi node)
    {
        defaultIn(node);
    }

    public void outAInstSiIsi(AInstSiIsi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstSiIsi(AInstSiIsi node)
    {
        inAInstSiIsi(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAl() != null)
        {
            node.getAl().apply(this);
        }
        if(node.getIbloc() != null)
        {
            node.getIbloc().apply(this);
        }
        if(node.getSinon() != null)
        {
            node.getSinon().apply(this);
        }
        outAInstSiIsi(node);
    }

    public void inAInstSinonSinon(AInstSinonSinon node)
    {
        defaultIn(node);
    }

    public void outAInstSinonSinon(AInstSinonSinon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstSinonSinon(AInstSinonSinon node)
    {
        inAInstSinonSinon(node);
        if(node.getSin() != null)
        {
            node.getSin().apply(this);
        }
        if(node.getIbloc() != null)
        {
            node.getIbloc().apply(this);
        }
        outAInstSinonSinon(node);
    }

    public void inASinonVideSinon(ASinonVideSinon node)
    {
        defaultIn(node);
    }

    public void outASinonVideSinon(ASinonVideSinon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASinonVideSinon(ASinonVideSinon node)
    {
        inASinonVideSinon(node);
        outASinonVideSinon(node);
    }

    public void inAInstTqItq(AInstTqItq node)
    {
        defaultIn(node);
    }

    public void outAInstTqItq(AInstTqItq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstTqItq(AInstTqItq node)
    {
        inAInstTqItq(node);
        if(node.getTq() != null)
        {
            node.getTq().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getFai() != null)
        {
            node.getFai().apply(this);
        }
        if(node.getIbloc() != null)
        {
            node.getIbloc().apply(this);
        }
        outAInstTqItq(node);
    }

    public void inAInstRetIret(AInstRetIret node)
    {
        defaultIn(node);
    }

    public void outAInstRetIret(AInstRetIret node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstRetIret(AInstRetIret node)
    {
        inAInstRetIret(node);
        if(node.getRet() != null)
        {
            node.getRet().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPvir() != null)
        {
            node.getPvir().apply(this);
        }
        outAInstRetIret(node);
    }

    public void inAParamParams(AParamParams node)
    {
        defaultIn(node);
    }

    public void outAParamParams(AParamParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamParams(AParamParams node)
    {
        inAParamParams(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLdeAlt() != null)
        {
            node.getLdeAlt().apply(this);
        }
        outAParamParams(node);
    }

    public void inAParamVideParams(AParamVideParams node)
    {
        defaultIn(node);
    }

    public void outAParamVideParams(AParamVideParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamVideParams(AParamVideParams node)
    {
        inAParamVideParams(node);
        outAParamVideParams(node);
    }

    public void inAVSimpleVar(AVSimpleVar node)
    {
        defaultIn(node);
    }

    public void outAVSimpleVar(AVSimpleVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVSimpleVar(AVSimpleVar node)
    {
        inAVSimpleVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVSimpleVar(node);
    }

    public void inAVDerivVar(AVDerivVar node)
    {
        defaultIn(node);
    }

    public void outAVDerivVar(AVDerivVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVDerivVar(AVDerivVar node)
    {
        inAVDerivVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCrochO() != null)
        {
            node.getCrochO().apply(this);
        }
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        if(node.getCrochF() != null)
        {
            node.getCrochF().apply(this);
        }
        outAVDerivVar(node);
    }

    public void inADvSimpleDvar(ADvSimpleDvar node)
    {
        defaultIn(node);
    }

    public void outADvSimpleDvar(ADvSimpleDvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADvSimpleDvar(ADvSimpleDvar node)
    {
        inADvSimpleDvar(node);
        if(node.getEnt() != null)
        {
            node.getEnt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADvSimpleDvar(node);
    }

    public void inADvDeriveDvar(ADvDeriveDvar node)
    {
        defaultIn(node);
    }

    public void outADvDeriveDvar(ADvDeriveDvar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADvDeriveDvar(ADvDeriveDvar node)
    {
        inADvDeriveDvar(node);
        if(node.getEnt() != null)
        {
            node.getEnt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCrochO() != null)
        {
            node.getCrochO().apply(this);
        }
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        if(node.getCrochF() != null)
        {
            node.getCrochF().apply(this);
        }
        outADvDeriveDvar(node);
    }

    public void inALdeAltLdeAlt(ALdeAltLdeAlt node)
    {
        defaultIn(node);
    }

    public void outALdeAltLdeAlt(ALdeAltLdeAlt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdeAltLdeAlt(ALdeAltLdeAlt node)
    {
        inALdeAltLdeAlt(node);
        if(node.getVir() != null)
        {
            node.getVir().apply(this);
        }
        if(node.getLde() != null)
        {
            node.getLde().apply(this);
        }
        outALdeAltLdeAlt(node);
    }

    public void inALdeAltVideLdeAlt(ALdeAltVideLdeAlt node)
    {
        defaultIn(node);
    }

    public void outALdeAltVideLdeAlt(ALdeAltVideLdeAlt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdeAltVideLdeAlt(ALdeAltVideLdeAlt node)
    {
        inALdeAltVideLdeAlt(node);
        outALdeAltVideLdeAlt(node);
    }

    public void inALdeListLde(ALdeListLde node)
    {
        defaultIn(node);
    }

    public void outALdeListLde(ALdeListLde node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdeListLde(ALdeListLde node)
    {
        inALdeListLde(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLde() != null)
        {
            node.getLde().apply(this);
        }
        outALdeListLde(node);
    }

    public void inALdeListVirLde(ALdeListVirLde node)
    {
        defaultIn(node);
    }

    public void outALdeListVirLde(ALdeListVirLde node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdeListVirLde(ALdeListVirLde node)
    {
        inALdeListVirLde(node);
        if(node.getVir() != null)
        {
            node.getVir().apply(this);
        }
        if(node.getLde() != null)
        {
            node.getLde().apply(this);
        }
        outALdeListVirLde(node);
    }

    public void inALdeVideLde(ALdeVideLde node)
    {
        defaultIn(node);
    }

    public void outALdeVideLde(ALdeVideLde node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALdeVideLde(ALdeVideLde node)
    {
        inALdeVideLde(node);
        outALdeVideLde(node);
    }

    public void inAExprOuExpr(AExprOuExpr node)
    {
        defaultIn(node);
    }

    public void outAExprOuExpr(AExprOuExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprOuExpr(AExprOuExpr node)
    {
        inAExprOuExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAExprOuExpr(node);
    }

    public void inAExpr1Expr(AExpr1Expr node)
    {
        defaultIn(node);
    }

    public void outAExpr1Expr(AExpr1Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr1Expr(AExpr1Expr node)
    {
        inAExpr1Expr(node);
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        outAExpr1Expr(node);
    }

    public void inAExprEtExpr1(AExprEtExpr1 node)
    {
        defaultIn(node);
    }

    public void outAExprEtExpr1(AExprEtExpr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprEtExpr1(AExprEtExpr1 node)
    {
        inAExprEtExpr1(node);
        if(node.getExpr1() != null)
        {
            node.getExpr1().apply(this);
        }
        if(node.getEt() != null)
        {
            node.getEt().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAExprEtExpr1(node);
    }

    public void inAExpr2Expr1(AExpr2Expr1 node)
    {
        defaultIn(node);
    }

    public void outAExpr2Expr1(AExpr2Expr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr2Expr1(AExpr2Expr1 node)
    {
        inAExpr2Expr1(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAExpr2Expr1(node);
    }

    public void inAExprEqExpr2(AExprEqExpr2 node)
    {
        defaultIn(node);
    }

    public void outAExprEqExpr2(AExprEqExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprEqExpr2(AExprEqExpr2 node)
    {
        inAExprEqExpr2(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getEgal() != null)
        {
            node.getEgal().apply(this);
        }
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outAExprEqExpr2(node);
    }

    public void inAExpInfExpr2(AExpInfExpr2 node)
    {
        defaultIn(node);
    }

    public void outAExpInfExpr2(AExpInfExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpInfExpr2(AExpInfExpr2 node)
    {
        inAExpInfExpr2(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outAExpInfExpr2(node);
    }

    public void inAExpr3Expr2(AExpr3Expr2 node)
    {
        defaultIn(node);
    }

    public void outAExpr3Expr2(AExpr3Expr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr3Expr2(AExpr3Expr2 node)
    {
        inAExpr3Expr2(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outAExpr3Expr2(node);
    }

    public void inAExprPlusExpr3(AExprPlusExpr3 node)
    {
        defaultIn(node);
    }

    public void outAExprPlusExpr3(AExprPlusExpr3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprPlusExpr3(AExprPlusExpr3 node)
    {
        inAExprPlusExpr3(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        outAExprPlusExpr3(node);
    }

    public void inAExprMoinsExpr3(AExprMoinsExpr3 node)
    {
        defaultIn(node);
    }

    public void outAExprMoinsExpr3(AExprMoinsExpr3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMoinsExpr3(AExprMoinsExpr3 node)
    {
        inAExprMoinsExpr3(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        if(node.getMoins() != null)
        {
            node.getMoins().apply(this);
        }
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        outAExprMoinsExpr3(node);
    }

    public void inAExpr4Expr3(AExpr4Expr3 node)
    {
        defaultIn(node);
    }

    public void outAExpr4Expr3(AExpr4Expr3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr4Expr3(AExpr4Expr3 node)
    {
        inAExpr4Expr3(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        outAExpr4Expr3(node);
    }

    public void inAExprMultExpr4(AExprMultExpr4 node)
    {
        defaultIn(node);
    }

    public void outAExprMultExpr4(AExprMultExpr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMultExpr4(AExprMultExpr4 node)
    {
        inAExprMultExpr4(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExpr5() != null)
        {
            node.getExpr5().apply(this);
        }
        outAExprMultExpr4(node);
    }

    public void inAExprDivExpr4(AExprDivExpr4 node)
    {
        defaultIn(node);
    }

    public void outAExprDivExpr4(AExprDivExpr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprDivExpr4(AExprDivExpr4 node)
    {
        inAExprDivExpr4(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExpr5() != null)
        {
            node.getExpr5().apply(this);
        }
        outAExprDivExpr4(node);
    }

    public void inAExpr5Expr4(AExpr5Expr4 node)
    {
        defaultIn(node);
    }

    public void outAExpr5Expr4(AExpr5Expr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr5Expr4(AExpr5Expr4 node)
    {
        inAExpr5Expr4(node);
        if(node.getExpr5() != null)
        {
            node.getExpr5().apply(this);
        }
        outAExpr5Expr4(node);
    }

    public void inAExprNonExpr5(AExprNonExpr5 node)
    {
        defaultIn(node);
    }

    public void outAExprNonExpr5(AExprNonExpr5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNonExpr5(AExprNonExpr5 node)
    {
        inAExprNonExpr5(node);
        if(node.getNon() != null)
        {
            node.getNon().apply(this);
        }
        if(node.getExpr5() != null)
        {
            node.getExpr5().apply(this);
        }
        outAExprNonExpr5(node);
    }

    public void inAExpr6Expr5(AExpr6Expr5 node)
    {
        defaultIn(node);
    }

    public void outAExpr6Expr5(AExpr6Expr5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr6Expr5(AExpr6Expr5 node)
    {
        inAExpr6Expr5(node);
        if(node.getExpr6() != null)
        {
            node.getExpr6().apply(this);
        }
        outAExpr6Expr5(node);
    }

    public void inAExprParExpr6(AExprParExpr6 node)
    {
        defaultIn(node);
    }

    public void outAExprParExpr6(AExprParExpr6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprParExpr6(AExprParExpr6 node)
    {
        inAExprParExpr6(node);
        if(node.getParO() != null)
        {
            node.getParO().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParF() != null)
        {
            node.getParF().apply(this);
        }
        outAExprParExpr6(node);
    }

    public void inAExprNbExpr6(AExprNbExpr6 node)
    {
        defaultIn(node);
    }

    public void outAExprNbExpr6(AExprNbExpr6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNbExpr6(AExprNbExpr6 node)
    {
        inAExprNbExpr6(node);
        if(node.getNombre() != null)
        {
            node.getNombre().apply(this);
        }
        outAExprNbExpr6(node);
    }

    public void inAExprVarExpr6(AExprVarExpr6 node)
    {
        defaultIn(node);
    }

    public void outAExprVarExpr6(AExprVarExpr6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprVarExpr6(AExprVarExpr6 node)
    {
        inAExprVarExpr6(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAExprVarExpr6(node);
    }

    public void inAEcrAppelEcrire(AEcrAppelEcrire node)
    {
        defaultIn(node);
    }

    public void outAEcrAppelEcrire(AEcrAppelEcrire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcrAppelEcrire(AEcrAppelEcrire node)
    {
        inAEcrAppelEcrire(node);
        if(node.getEcr() != null)
        {
            node.getEcr().apply(this);
        }
        if(node.getParO() != null)
        {
            node.getParO().apply(this);
        }
        if(node.getApp() != null)
        {
            node.getApp().apply(this);
        }
        if(node.getParF() != null)
        {
            node.getParF().apply(this);
        }
        if(node.getPvir() != null)
        {
            node.getPvir().apply(this);
        }
        outAEcrAppelEcrire(node);
    }

    public void inAEcrExprEcrire(AEcrExprEcrire node)
    {
        defaultIn(node);
    }

    public void outAEcrExprEcrire(AEcrExprEcrire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcrExprEcrire(AEcrExprEcrire node)
    {
        inAEcrExprEcrire(node);
        if(node.getEcr() != null)
        {
            node.getEcr().apply(this);
        }
        if(node.getParO() != null)
        {
            node.getParO().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParF() != null)
        {
            node.getParF().apply(this);
        }
        if(node.getPvir() != null)
        {
            node.getPvir().apply(this);
        }
        outAEcrExprEcrire(node);
    }

    public void inALireLire(ALireLire node)
    {
        defaultIn(node);
    }

    public void outALireLire(ALireLire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALireLire(ALireLire node)
    {
        inALireLire(node);
        if(node.getLir() != null)
        {
            node.getLir().apply(this);
        }
        if(node.getParO() != null)
        {
            node.getParO().apply(this);
        }
        if(node.getParF() != null)
        {
            node.getParF().apply(this);
        }
        if(node.getPvir() != null)
        {
            node.getPvir().apply(this);
        }
        outALireLire(node);
    }
}
