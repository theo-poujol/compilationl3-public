/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AListVarOptLdvo */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AListVarOptVideLdvo */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AListVarMainLdv */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AListVarMainVideLdv */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AListeVarLdvAlt */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AListeVideVarLdvAlt */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ALdfDvLdf */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ALdfVideLdf */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ADefFctDf */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ALdiIbloc */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce ALdiListLdi */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce ALdiVideLdi */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AIappInstBloc */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list, false);
            }
            break;
            case 14: /* reduce AIaffInstBloc */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce AIsiInstBloc */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce AItqInstBloc */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AIretInstBloc */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AEcritureInstBloc */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AAppIapp */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AAppLdeApp */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AAffIaff */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list, false);
            }
            break;
            case 22: /* reduce AInstSiIsi */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list, false);
            }
            break;
            case 23: /* reduce AInstSinonSinon */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list, false);
            }
            break;
            case 24: /* reduce ASinonVideSinon */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list, false);
            }
            break;
            case 25: /* reduce AInstTqItq */
            {
                ArrayList<Object> list = new25();
                push(goTo(14), list, false);
            }
            break;
            case 26: /* reduce AInstRetIret */
            {
                ArrayList<Object> list = new26();
                push(goTo(15), list, false);
            }
            break;
            case 27: /* reduce AVSimpleVar */
            {
                ArrayList<Object> list = new27();
                push(goTo(16), list, false);
            }
            break;
            case 28: /* reduce AVDerivVar */
            {
                ArrayList<Object> list = new28();
                push(goTo(16), list, false);
            }
            break;
            case 29: /* reduce ADvSimpleDvar */
            {
                ArrayList<Object> list = new29();
                push(goTo(17), list, false);
            }
            break;
            case 30: /* reduce ADvDeriveDvar */
            {
                ArrayList<Object> list = new30();
                push(goTo(17), list, false);
            }
            break;
            case 31: /* reduce ALdeListLde */
            {
                ArrayList<Object> list = new31();
                push(goTo(18), list, false);
            }
            break;
            case 32: /* reduce ALdeVideLde */
            {
                ArrayList<Object> list = new32();
                push(goTo(18), list, false);
            }
            break;
            case 33: /* reduce AExprOuExpr */
            {
                ArrayList<Object> list = new33();
                push(goTo(19), list, false);
            }
            break;
            case 34: /* reduce AExpr1Expr */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list, false);
            }
            break;
            case 35: /* reduce AExprEtExpr1 */
            {
                ArrayList<Object> list = new35();
                push(goTo(20), list, false);
            }
            break;
            case 36: /* reduce AExpr2Expr1 */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list, false);
            }
            break;
            case 37: /* reduce AExprEqExpr2 */
            {
                ArrayList<Object> list = new37();
                push(goTo(21), list, false);
            }
            break;
            case 38: /* reduce AExpInfExpr2 */
            {
                ArrayList<Object> list = new38();
                push(goTo(21), list, false);
            }
            break;
            case 39: /* reduce AExpr3Expr2 */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list, false);
            }
            break;
            case 40: /* reduce AExprPlusExpr3 */
            {
                ArrayList<Object> list = new40();
                push(goTo(22), list, false);
            }
            break;
            case 41: /* reduce AExprMoinsExpr3 */
            {
                ArrayList<Object> list = new41();
                push(goTo(22), list, false);
            }
            break;
            case 42: /* reduce AExpr4Expr3 */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list, false);
            }
            break;
            case 43: /* reduce AExprMultExpr4 */
            {
                ArrayList<Object> list = new43();
                push(goTo(23), list, false);
            }
            break;
            case 44: /* reduce AExprDivExpr4 */
            {
                ArrayList<Object> list = new44();
                push(goTo(23), list, false);
            }
            break;
            case 45: /* reduce AExpr5Expr4 */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list, false);
            }
            break;
            case 46: /* reduce AExprNonExpr5 */
            {
                ArrayList<Object> list = new46();
                push(goTo(24), list, false);
            }
            break;
            case 47: /* reduce AExpr6Expr5 */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list, false);
            }
            break;
            case 48: /* reduce AExprParExpr6 */
            {
                ArrayList<Object> list = new48();
                push(goTo(25), list, false);
            }
            break;
            case 49: /* reduce AExprNbExpr6 */
            {
                ArrayList<Object> list = new49();
                push(goTo(25), list, false);
            }
            break;
            case 50: /* reduce AExprVarExpr6 */
            {
                ArrayList<Object> list = new50();
                push(goTo(25), list, false);
            }
            break;
            case 51: /* reduce AEcrExprEcrire */
            {
                ArrayList<Object> list = new51();
                push(goTo(26), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PLdvo pldvoNode2;
        PLdf pldfNode3;
        pldvoNode2 = (PLdvo)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pprogrammeNode1 = new AProgramme(pldvoNode2, pldfNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AListVarOptLdvo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvo pldvoNode1;
        {
            // Block
        PLdv pldvNode2;
        TPvir tpvirNode3;
        pldvNode2 = (PLdv)nodeArrayList1.get(0);
        tpvirNode3 = (TPvir)nodeArrayList2.get(0);

        pldvoNode1 = new AListVarOptLdvo(pldvNode2, tpvirNode3);
        }
	nodeList.add(pldvoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AListVarOptVideLdvo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdvo pldvoNode1;
        {
            // Block

        pldvoNode1 = new AListVarOptVideLdvo();
        }
	nodeList.add(pldvoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AListVarMainLdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdv pldvNode1;
        {
            // Block
        PDvar pdvarNode2;
        PLdvAlt pldvaltNode3;
        pdvarNode2 = (PDvar)nodeArrayList1.get(0);
        pldvaltNode3 = (PLdvAlt)nodeArrayList2.get(0);

        pldvNode1 = new AListVarMainLdv(pdvarNode2, pldvaltNode3);
        }
	nodeList.add(pldvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AListVarMainVideLdv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdv pldvNode1;
        {
            // Block

        pldvNode1 = new AListVarMainVideLdv();
        }
	nodeList.add(pldvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AListeVarLdvAlt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvAlt pldvaltNode1;
        {
            // Block
        TVir tvirNode2;
        PDvar pdvarNode3;
        PLdvAlt pldvaltNode4;
        tvirNode2 = (TVir)nodeArrayList1.get(0);
        pdvarNode3 = (PDvar)nodeArrayList2.get(0);
        pldvaltNode4 = (PLdvAlt)nodeArrayList3.get(0);

        pldvaltNode1 = new AListeVarLdvAlt(tvirNode2, pdvarNode3, pldvaltNode4);
        }
	nodeList.add(pldvaltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AListeVideVarLdvAlt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdvAlt pldvaltNode1;
        {
            // Block

        pldvaltNode1 = new AListeVideVarLdvAlt();
        }
	nodeList.add(pldvaltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ALdfDvLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdf pldfNode1;
        {
            // Block
        PDf pdfNode2;
        PLdf pldfNode3;
        pdfNode2 = (PDf)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pldfNode1 = new ALdfDvLdf(pdfNode2, pldfNode3);
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ALdfVideLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdf pldfNode1;
        {
            // Block

        pldfNode1 = new ALdfVideLdf();
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ADefFctDf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        TId tidNode2;
        TParO tparoNode3;
        PLdv pldvNode4;
        TParF tparfNode5;
        PLdvo pldvoNode6;
        PIbloc piblocNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tparoNode3 = (TParO)nodeArrayList2.get(0);
        pldvNode4 = (PLdv)nodeArrayList3.get(0);
        tparfNode5 = (TParF)nodeArrayList4.get(0);
        pldvoNode6 = (PLdvo)nodeArrayList5.get(0);
        piblocNode7 = (PIbloc)nodeArrayList6.get(0);

        pdfNode1 = new ADefFctDf(tidNode2, tparoNode3, pldvNode4, tparfNode5, pldvoNode6, piblocNode7);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ALdiIbloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIbloc piblocNode1;
        {
            // Block
        TAccO taccoNode2;
        PLdi pldiNode3;
        TAccF taccfNode4;
        taccoNode2 = (TAccO)nodeArrayList1.get(0);
        pldiNode3 = (PLdi)nodeArrayList2.get(0);
        taccfNode4 = (TAccF)nodeArrayList3.get(0);

        piblocNode1 = new ALdiIbloc(taccoNode2, pldiNode3, taccfNode4);
        }
	nodeList.add(piblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ALdiListLdi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdi pldiNode1;
        {
            // Block
        PInstBloc pinstblocNode2;
        PLdi pldiNode3;
        pinstblocNode2 = (PInstBloc)nodeArrayList1.get(0);
        pldiNode3 = (PLdi)nodeArrayList2.get(0);

        pldiNode1 = new ALdiListLdi(pinstblocNode2, pldiNode3);
        }
	nodeList.add(pldiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ALdiVideLdi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdi pldiNode1;
        {
            // Block

        pldiNode1 = new ALdiVideLdi();
        }
	nodeList.add(pldiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIappInstBloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstBloc pinstblocNode1;
        {
            // Block
        PIapp piappNode2;
        piappNode2 = (PIapp)nodeArrayList1.get(0);

        pinstblocNode1 = new AIappInstBloc(piappNode2);
        }
	nodeList.add(pinstblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AIaffInstBloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstBloc pinstblocNode1;
        {
            // Block
        PIaff piaffNode2;
        piaffNode2 = (PIaff)nodeArrayList1.get(0);

        pinstblocNode1 = new AIaffInstBloc(piaffNode2);
        }
	nodeList.add(pinstblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AIsiInstBloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstBloc pinstblocNode1;
        {
            // Block
        PIsi pisiNode2;
        pisiNode2 = (PIsi)nodeArrayList1.get(0);

        pinstblocNode1 = new AIsiInstBloc(pisiNode2);
        }
	nodeList.add(pinstblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AItqInstBloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstBloc pinstblocNode1;
        {
            // Block
        PItq pitqNode2;
        pitqNode2 = (PItq)nodeArrayList1.get(0);

        pinstblocNode1 = new AItqInstBloc(pitqNode2);
        }
	nodeList.add(pinstblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIretInstBloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstBloc pinstblocNode1;
        {
            // Block
        PIret piretNode2;
        piretNode2 = (PIret)nodeArrayList1.get(0);

        pinstblocNode1 = new AIretInstBloc(piretNode2);
        }
	nodeList.add(pinstblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AEcritureInstBloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstBloc pinstblocNode1;
        {
            // Block
        PEcrire pecrireNode2;
        pecrireNode2 = (PEcrire)nodeArrayList1.get(0);

        pinstblocNode1 = new AEcritureInstBloc(pecrireNode2);
        }
	nodeList.add(pinstblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAppIapp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIapp piappNode1;
        {
            // Block
        PApp pappNode2;
        TPvir tpvirNode3;
        pappNode2 = (PApp)nodeArrayList1.get(0);
        tpvirNode3 = (TPvir)nodeArrayList2.get(0);

        piappNode1 = new AAppIapp(pappNode2, tpvirNode3);
        }
	nodeList.add(piappNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAppLdeApp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PApp pappNode1;
        {
            // Block
        TId tidNode2;
        TParO tparoNode3;
        PLde pldeNode4;
        TParF tparfNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tparoNode3 = (TParO)nodeArrayList2.get(0);
        pldeNode4 = (PLde)nodeArrayList3.get(0);
        tparfNode5 = (TParF)nodeArrayList4.get(0);

        pappNode1 = new AAppLdeApp(tidNode2, tparoNode3, pldeNode4, tparfNode5);
        }
	nodeList.add(pappNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAffIaff */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIaff piaffNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PExpr pexprNode4;
        TPvir tpvirNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tpvirNode5 = (TPvir)nodeArrayList4.get(0);

        piaffNode1 = new AAffIaff(pvarNode2, tegalNode3, pexprNode4, tpvirNode5);
        }
	nodeList.add(piaffNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AInstSiIsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIsi pisiNode1;
        {
            // Block
        TSi tsiNode2;
        PExpr pexprNode3;
        TAl talNode4;
        PIbloc piblocNode5;
        PSinon psinonNode6;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        talNode4 = (TAl)nodeArrayList3.get(0);
        piblocNode5 = (PIbloc)nodeArrayList4.get(0);
        psinonNode6 = (PSinon)nodeArrayList5.get(0);

        pisiNode1 = new AInstSiIsi(tsiNode2, pexprNode3, talNode4, piblocNode5, psinonNode6);
        }
	nodeList.add(pisiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AInstSinonSinon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinon psinonNode1;
        {
            // Block
        TSin tsinNode2;
        PIbloc piblocNode3;
        tsinNode2 = (TSin)nodeArrayList1.get(0);
        piblocNode3 = (PIbloc)nodeArrayList2.get(0);

        psinonNode1 = new AInstSinonSinon(tsinNode2, piblocNode3);
        }
	nodeList.add(psinonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASinonVideSinon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSinon psinonNode1;
        {
            // Block

        psinonNode1 = new ASinonVideSinon();
        }
	nodeList.add(psinonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AInstTqItq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItq pitqNode1;
        {
            // Block
        TTq ttqNode2;
        PExpr pexprNode3;
        TFai tfaiNode4;
        PIbloc piblocNode5;
        ttqNode2 = (TTq)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tfaiNode4 = (TFai)nodeArrayList3.get(0);
        piblocNode5 = (PIbloc)nodeArrayList4.get(0);

        pitqNode1 = new AInstTqItq(ttqNode2, pexprNode3, tfaiNode4, piblocNode5);
        }
	nodeList.add(pitqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AInstRetIret */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIret piretNode1;
        {
            // Block
        TRet tretNode2;
        PExpr pexprNode3;
        TPvir tpvirNode4;
        tretNode2 = (TRet)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tpvirNode4 = (TPvir)nodeArrayList3.get(0);

        piretNode1 = new AInstRetIret(tretNode2, pexprNode3, tpvirNode4);
        }
	nodeList.add(piretNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AVSimpleVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AVSimpleVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AVDerivVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TCrochO tcrochoNode3;
        TNombre tnombreNode4;
        TCrochF tcrochfNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcrochoNode3 = (TCrochO)nodeArrayList2.get(0);
        tnombreNode4 = (TNombre)nodeArrayList3.get(0);
        tcrochfNode5 = (TCrochF)nodeArrayList4.get(0);

        pvarNode1 = new AVDerivVar(tidNode2, tcrochoNode3, tnombreNode4, tcrochfNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ADvSimpleDvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDvar pdvarNode1;
        {
            // Block
        TEnt tentNode2;
        TId tidNode3;
        tentNode2 = (TEnt)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdvarNode1 = new ADvSimpleDvar(tentNode2, tidNode3);
        }
	nodeList.add(pdvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ADvDeriveDvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDvar pdvarNode1;
        {
            // Block
        TEnt tentNode2;
        TId tidNode3;
        TCrochO tcrochoNode4;
        TNombre tnombreNode5;
        TCrochF tcrochfNode6;
        tentNode2 = (TEnt)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcrochoNode4 = (TCrochO)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        tcrochfNode6 = (TCrochF)nodeArrayList5.get(0);

        pdvarNode1 = new ADvDeriveDvar(tentNode2, tidNode3, tcrochoNode4, tnombreNode5, tcrochfNode6);
        }
	nodeList.add(pdvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ALdeListLde */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLde pldeNode1;
        {
            // Block
        PExpr pexprNode2;
        PLde pldeNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pldeNode3 = (PLde)nodeArrayList2.get(0);

        pldeNode1 = new ALdeListLde(pexprNode2, pldeNode3);
        }
	nodeList.add(pldeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ALdeVideLde */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLde pldeNode1;
        {
            // Block

        pldeNode1 = new ALdeVideLde();
        }
	nodeList.add(pldeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AExprOuExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOu touNode3;
        PExpr1 pexpr1Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexpr1Node4 = (PExpr1)nodeArrayList3.get(0);

        pexprNode1 = new AExprOuExpr(pexprNode2, touNode3, pexpr1Node4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AExpr1Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr1 pexpr1Node2;
        pexpr1Node2 = (PExpr1)nodeArrayList1.get(0);

        pexprNode1 = new AExpr1Expr(pexpr1Node2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExprEtExpr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr1 pexpr1Node1;
        {
            // Block
        PExpr1 pexpr1Node2;
        TEt tetNode3;
        PExpr2 pexpr2Node4;
        pexpr1Node2 = (PExpr1)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pexpr1Node1 = new AExprEtExpr1(pexpr1Node2, tetNode3, pexpr2Node4);
        }
	nodeList.add(pexpr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AExpr2Expr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr1 pexpr1Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);

        pexpr1Node1 = new AExpr2Expr1(pexpr2Node2);
        }
	nodeList.add(pexpr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExprEqExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TEgal tegalNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AExprEqExpr2(pexpr2Node2, tegalNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExpInfExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TInf tinfNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AExpInfExpr2(pexpr2Node2, tinfNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AExpr3Expr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);

        pexpr2Node1 = new AExpr3Expr2(pexpr3Node2);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExprPlusExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TPlus tplusNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new AExprPlusExpr3(pexpr3Node2, tplusNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExprMoinsExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TMoins tmoinsNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new AExprMoinsExpr3(pexpr3Node2, tmoinsNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AExpr4Expr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);

        pexpr3Node1 = new AExpr4Expr3(pexpr4Node2);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExprMultExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TMult tmultNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new AExprMultExpr4(pexpr4Node2, tmultNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExprDivExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TDiv tdivNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new AExprDivExpr4(pexpr4Node2, tdivNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AExpr5Expr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);

        pexpr4Node1 = new AExpr5Expr4(pexpr5Node2);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExprNonExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        TNon tnonNode2;
        PExpr5 pexpr5Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pexpr5Node3 = (PExpr5)nodeArrayList2.get(0);

        pexpr5Node1 = new AExprNonExpr5(tnonNode2, pexpr5Node3);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpr6Expr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr6 pexpr6Node2;
        pexpr6Node2 = (PExpr6)nodeArrayList1.get(0);

        pexpr5Node1 = new AExpr6Expr5(pexpr6Node2);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AExprParExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TParO tparoNode2;
        PExpr pexprNode3;
        TParF tparfNode4;
        tparoNode2 = (TParO)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tparfNode4 = (TParF)nodeArrayList3.get(0);

        pexpr6Node1 = new AExprParExpr6(tparoNode2, pexprNode3, tparfNode4);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AExprNbExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexpr6Node1 = new AExprNbExpr6(tnombreNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AExprVarExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpr6Node1 = new AExprVarExpr6(pvarNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AEcrExprEcrire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEcrire pecrireNode1;
        {
            // Block
        TEcr tecrNode2;
        TParO tparoNode3;
        PExpr pexprNode4;
        TParF tparfNode5;
        TPvir tpvirNode6;
        tecrNode2 = (TEcr)nodeArrayList1.get(0);
        tparoNode3 = (TParO)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tparfNode5 = (TParF)nodeArrayList4.get(0);
        tpvirNode6 = (TPvir)nodeArrayList5.get(0);

        pecrireNode1 = new AEcrExprEcrire(tecrNode2, tparoNode3, pexprNode4, tparfNode5, tpvirNode6);
        }
	nodeList.add(pecrireNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 2}, {9, REDUCE, 4}, {26, SHIFT, 1}, },
			{{-1, ERROR, 1}, {27, SHIFT, 6}, },
			{{-1, ERROR, 2}, {29, ACCEPT, -1}, },
			{{-1, REDUCE, 8}, {27, SHIFT, 7}, },
			{{-1, ERROR, 4}, {9, SHIFT, 10}, },
			{{-1, REDUCE, 6}, {10, SHIFT, 11}, },
			{{-1, REDUCE, 29}, {13, SHIFT, 13}, },
			{{-1, ERROR, 7}, {15, SHIFT, 14}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 8}, {27, SHIFT, 7}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 11}, {26, SHIFT, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 13}, {28, SHIFT, 17}, },
			{{-1, REDUCE, 4}, {26, SHIFT, 1}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, {10, SHIFT, 11}, },
			{{-1, ERROR, 17}, {14, SHIFT, 20}, },
			{{-1, ERROR, 18}, {16, SHIFT, 21}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 4}, {11, REDUCE, 2}, {26, SHIFT, 1}, },
			{{-1, ERROR, 22}, {11, SHIFT, 23}, },
			{{-1, REDUCE, 12}, {18, SHIFT, 25}, {20, SHIFT, 26}, {22, SHIFT, 27}, {24, SHIFT, 28}, {27, SHIFT, 29}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 25}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 26}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 27}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 28}, {15, SHIFT, 54}, },
			{{-1, REDUCE, 27}, {13, SHIFT, 55}, {15, SHIFT, 56}, },
			{{-1, ERROR, 30}, {12, SHIFT, 57}, },
			{{-1, REDUCE, 12}, {18, SHIFT, 25}, {20, SHIFT, 26}, {22, SHIFT, 27}, {24, SHIFT, 28}, {27, SHIFT, 29}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 33}, {9, SHIFT, 59}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 38}, {1, SHIFT, 60}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 40}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 41}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, REDUCE, 27}, {13, SHIFT, 55}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 45}, {7, SHIFT, 63}, {19, SHIFT, 64}, },
			{{-1, REDUCE, 34}, {6, SHIFT, 65}, },
			{{-1, REDUCE, 36}, {1, SHIFT, 66}, {5, SHIFT, 67}, },
			{{-1, REDUCE, 39}, {0, SHIFT, 68}, {2, SHIFT, 69}, },
			{{-1, REDUCE, 42}, {3, SHIFT, 70}, {4, SHIFT, 71}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 52}, {7, SHIFT, 63}, {21, SHIFT, 72}, },
			{{-1, ERROR, 53}, {7, SHIFT, 63}, {9, SHIFT, 73}, },
			{{-1, ERROR, 54}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 55}, {28, SHIFT, 75}, },
			{{-1, REDUCE, 32}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 60}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 62}, {7, SHIFT, 63}, {16, SHIFT, 79}, },
			{{-1, ERROR, 63}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 64}, {11, SHIFT, 23}, },
			{{-1, ERROR, 65}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 66}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 67}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 68}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 69}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 70}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 71}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 72}, {11, SHIFT, 23}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 74}, {7, SHIFT, 63}, {16, SHIFT, 90}, },
			{{-1, ERROR, 75}, {14, SHIFT, 91}, },
			{{-1, ERROR, 76}, {16, SHIFT, 92}, },
			{{-1, REDUCE, 32}, {7, SHIFT, 63}, {8, SHIFT, 40}, {15, SHIFT, 41}, {27, SHIFT, 42}, {28, SHIFT, 43}, },
			{{-1, ERROR, 78}, {7, SHIFT, 63}, {9, SHIFT, 94}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 33}, {6, SHIFT, 65}, },
			{{-1, REDUCE, 24}, {17, SHIFT, 95}, },
			{{-1, REDUCE, 35}, {1, SHIFT, 66}, {5, SHIFT, 67}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 68}, {2, SHIFT, 69}, },
			{{-1, REDUCE, 38}, {0, SHIFT, 68}, {2, SHIFT, 69}, },
			{{-1, REDUCE, 40}, {3, SHIFT, 70}, {4, SHIFT, 71}, },
			{{-1, REDUCE, 41}, {3, SHIFT, 70}, {4, SHIFT, 71}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 90}, {9, SHIFT, 97}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 95}, {11, SHIFT, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 23}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {21, 22}, },
			{{-1, 4}, {14, 18}, },
			{{-1, 12}, {16, 19}, },
			{{-1, 8}, {9, 15}, },
			{{-1, 9}, },
			{{-1, 24}, {64, 81}, {72, 89}, {95, 98}, },
			{{-1, 30}, {31, 58}, },
			{{-1, 31}, },
			{{-1, 32}, },
			{{-1, 33}, },
			{{-1, 34}, },
			{{-1, 35}, },
			{{-1, 96}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 44}, {23, 38}, {31, 38}, },
			{{-1, 5}, {11, 16}, },
			{{-1, 76}, {77, 93}, },
			{{-1, 77}, {25, 45}, {26, 52}, {27, 53}, {41, 62}, {54, 74}, {60, 78}, },
			{{-1, 46}, {63, 80}, },
			{{-1, 47}, {65, 82}, },
			{{-1, 48}, {66, 83}, {67, 84}, },
			{{-1, 49}, {68, 85}, {69, 86}, },
			{{-1, 50}, {40, 61}, {70, 87}, {71, 88}, },
			{{-1, 51}, },
			{{-1, 39}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: ';', 'entier', id, EOF",
			"expecting: id",
			"expecting: EOF",
			"expecting: id, EOF",
			"expecting: ';'",
			"expecting: ';', ',', ')'",
			"expecting: ';', ',', '[', ')'",
			"expecting: '('",
			"expecting: '{', id, EOF",
			"expecting: 'entier'",
			"expecting: ';', ')'",
			"expecting: nombre",
			"expecting: ')', 'entier'",
			"expecting: ']'",
			"expecting: ')'",
			"expecting: ';', '{', 'entier'",
			"expecting: '{'",
			"expecting: '}', 'si', 'tant_que', 'retour', 'ecrire', id",
			"expecting: '!', '(', id, nombre",
			"expecting: '=', '[', '('",
			"expecting: '}'",
			"expecting: '='",
			"expecting: '+', '=', '-', '*', '/', '<', '&', '|', '!', ';', '[', '(', ')', 'alors', 'faire', id, nombre",
			"expecting: '+', '=', '-', '*', '/', '<', '&', '|', '!', ';', '(', ')', 'alors', 'faire', id, nombre",
			"expecting: '|', 'alors'",
			"expecting: '&', '|', '!', ';', '(', ')', 'alors', 'faire', id, nombre",
			"expecting: '=', '<', '&', '|', '!', ';', '(', ')', 'alors', 'faire', id, nombre",
			"expecting: '+', '=', '-', '<', '&', '|', '!', ';', '(', ')', 'alors', 'faire', id, nombre",
			"expecting: '|', 'faire'",
			"expecting: '|', ';'",
			"expecting: '!', '(', ')', id, nombre",
			"expecting: '}', 'sinon', 'si', 'tant_que', 'retour', 'ecrire', id, EOF",
			"expecting: '|', ')'",
			"expecting: '|', '!', '(', ')', id, nombre",
			"expecting: '}', 'sinon', 'si', 'tant_que', 'retour', 'ecrire', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 2, 3, 8, 9, 10, 11, 12, 2, 5, 13, 14, 10, 5, 15, 16, 17, 3, 18, 18, 18, 7, 19, 20, 17, 17, 4, 17, 17, 17, 17, 21, 17, 18, 18, 22, 23, 23, 24, 25, 26, 27, 23, 23, 23, 28, 29, 18, 11, 30, 31, 20, 17, 18, 23, 32, 18, 16, 18, 18, 18, 18, 18, 18, 18, 16, 17, 32, 13, 14, 33, 29, 23, 25, 34, 26, 27, 27, 23, 23, 23, 23, 17, 4, 23, 4, 14, 17, 16, 17, 17, 17, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
