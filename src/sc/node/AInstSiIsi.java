/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AInstSiIsi extends PIsi
{
    private TSi _si_;
    private PExpr _expr_;
    private TAl _al_;
    private PIbloc _ibloc_;
    private PSinon _sinon_;

    public AInstSiIsi()
    {
        // Constructor
    }

    public AInstSiIsi(
        @SuppressWarnings("hiding") TSi _si_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TAl _al_,
        @SuppressWarnings("hiding") PIbloc _ibloc_,
        @SuppressWarnings("hiding") PSinon _sinon_)
    {
        // Constructor
        setSi(_si_);

        setExpr(_expr_);

        setAl(_al_);

        setIbloc(_ibloc_);

        setSinon(_sinon_);

    }

    @Override
    public Object clone()
    {
        return new AInstSiIsi(
            cloneNode(this._si_),
            cloneNode(this._expr_),
            cloneNode(this._al_),
            cloneNode(this._ibloc_),
            cloneNode(this._sinon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstSiIsi(this);
    }

    public TSi getSi()
    {
        return this._si_;
    }

    public void setSi(TSi node)
    {
        if(this._si_ != null)
        {
            this._si_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._si_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TAl getAl()
    {
        return this._al_;
    }

    public void setAl(TAl node)
    {
        if(this._al_ != null)
        {
            this._al_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._al_ = node;
    }

    public PIbloc getIbloc()
    {
        return this._ibloc_;
    }

    public void setIbloc(PIbloc node)
    {
        if(this._ibloc_ != null)
        {
            this._ibloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ibloc_ = node;
    }

    public PSinon getSinon()
    {
        return this._sinon_;
    }

    public void setSinon(PSinon node)
    {
        if(this._sinon_ != null)
        {
            this._sinon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sinon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._si_)
            + toString(this._expr_)
            + toString(this._al_)
            + toString(this._ibloc_)
            + toString(this._sinon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._si_ == child)
        {
            this._si_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._al_ == child)
        {
            this._al_ = null;
            return;
        }

        if(this._ibloc_ == child)
        {
            this._ibloc_ = null;
            return;
        }

        if(this._sinon_ == child)
        {
            this._sinon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._si_ == oldChild)
        {
            setSi((TSi) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._al_ == oldChild)
        {
            setAl((TAl) newChild);
            return;
        }

        if(this._ibloc_ == oldChild)
        {
            setIbloc((PIbloc) newChild);
            return;
        }

        if(this._sinon_ == oldChild)
        {
            setSinon((PSinon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
