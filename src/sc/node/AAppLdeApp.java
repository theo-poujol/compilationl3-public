/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AAppLdeApp extends PApp
{
    private TId _id_;
    private TParO _parO_;
    private PLde _lde_;
    private TParF _parF_;

    public AAppLdeApp()
    {
        // Constructor
    }

    public AAppLdeApp(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TParO _parO_,
        @SuppressWarnings("hiding") PLde _lde_,
        @SuppressWarnings("hiding") TParF _parF_)
    {
        // Constructor
        setId(_id_);

        setParO(_parO_);

        setLde(_lde_);

        setParF(_parF_);

    }

    @Override
    public Object clone()
    {
        return new AAppLdeApp(
            cloneNode(this._id_),
            cloneNode(this._parO_),
            cloneNode(this._lde_),
            cloneNode(this._parF_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAppLdeApp(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TParO getParO()
    {
        return this._parO_;
    }

    public void setParO(TParO node)
    {
        if(this._parO_ != null)
        {
            this._parO_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parO_ = node;
    }

    public PLde getLde()
    {
        return this._lde_;
    }

    public void setLde(PLde node)
    {
        if(this._lde_ != null)
        {
            this._lde_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lde_ = node;
    }

    public TParF getParF()
    {
        return this._parF_;
    }

    public void setParF(TParF node)
    {
        if(this._parF_ != null)
        {
            this._parF_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parF_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._parO_)
            + toString(this._lde_)
            + toString(this._parF_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._parO_ == child)
        {
            this._parO_ = null;
            return;
        }

        if(this._lde_ == child)
        {
            this._lde_ = null;
            return;
        }

        if(this._parF_ == child)
        {
            this._parF_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._parO_ == oldChild)
        {
            setParO((TParO) newChild);
            return;
        }

        if(this._lde_ == oldChild)
        {
            setLde((PLde) newChild);
            return;
        }

        if(this._parF_ == oldChild)
        {
            setParF((TParF) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
