/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ALdiIbloc extends PIbloc
{
    private TAccO _accO_;
    private PLdi _ldi_;
    private TAccF _accF_;

    public ALdiIbloc()
    {
        // Constructor
    }

    public ALdiIbloc(
        @SuppressWarnings("hiding") TAccO _accO_,
        @SuppressWarnings("hiding") PLdi _ldi_,
        @SuppressWarnings("hiding") TAccF _accF_)
    {
        // Constructor
        setAccO(_accO_);

        setLdi(_ldi_);

        setAccF(_accF_);

    }

    @Override
    public Object clone()
    {
        return new ALdiIbloc(
            cloneNode(this._accO_),
            cloneNode(this._ldi_),
            cloneNode(this._accF_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALdiIbloc(this);
    }

    public TAccO getAccO()
    {
        return this._accO_;
    }

    public void setAccO(TAccO node)
    {
        if(this._accO_ != null)
        {
            this._accO_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accO_ = node;
    }

    public PLdi getLdi()
    {
        return this._ldi_;
    }

    public void setLdi(PLdi node)
    {
        if(this._ldi_ != null)
        {
            this._ldi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ldi_ = node;
    }

    public TAccF getAccF()
    {
        return this._accF_;
    }

    public void setAccF(TAccF node)
    {
        if(this._accF_ != null)
        {
            this._accF_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accF_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._accO_)
            + toString(this._ldi_)
            + toString(this._accF_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._accO_ == child)
        {
            this._accO_ = null;
            return;
        }

        if(this._ldi_ == child)
        {
            this._ldi_ = null;
            return;
        }

        if(this._accF_ == child)
        {
            this._accF_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._accO_ == oldChild)
        {
            setAccO((TAccO) newChild);
            return;
        }

        if(this._ldi_ == oldChild)
        {
            setLdi((PLdi) newChild);
            return;
        }

        if(this._accF_ == oldChild)
        {
            setAccF((TAccF) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
