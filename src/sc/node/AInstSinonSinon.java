/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AInstSinonSinon extends PSinon
{
    private TSin _sin_;
    private PIbloc _ibloc_;

    public AInstSinonSinon()
    {
        // Constructor
    }

    public AInstSinonSinon(
        @SuppressWarnings("hiding") TSin _sin_,
        @SuppressWarnings("hiding") PIbloc _ibloc_)
    {
        // Constructor
        setSin(_sin_);

        setIbloc(_ibloc_);

    }

    @Override
    public Object clone()
    {
        return new AInstSinonSinon(
            cloneNode(this._sin_),
            cloneNode(this._ibloc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstSinonSinon(this);
    }

    public TSin getSin()
    {
        return this._sin_;
    }

    public void setSin(TSin node)
    {
        if(this._sin_ != null)
        {
            this._sin_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sin_ = node;
    }

    public PIbloc getIbloc()
    {
        return this._ibloc_;
    }

    public void setIbloc(PIbloc node)
    {
        if(this._ibloc_ != null)
        {
            this._ibloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ibloc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sin_)
            + toString(this._ibloc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sin_ == child)
        {
            this._sin_ = null;
            return;
        }

        if(this._ibloc_ == child)
        {
            this._ibloc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sin_ == oldChild)
        {
            setSin((TSin) newChild);
            return;
        }

        if(this._ibloc_ == oldChild)
        {
            setIbloc((PIbloc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
